# Commit Message Format

## Structure
<type>(<scope>): <subject>

<body>

<footer>

## Types
- feat: A new feature
- fix: A bug fix
- docs: Documentation only changes
- style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
- refactor: A code change that neither fixes a bug nor adds a feature
- perf: A code change that improves performance
- test: Adding missing tests or correcting existing tests
- build: Changes that affect the build system or external dependencies
- ci: Changes to our CI configuration files and scripts
- chore: Other changes that don't modify src or test files
- revert: Reverts a previous commit

## Scope
Specify a scope to indicate the area of the codebase that was affected. Examples:
- parser
- cli
- docs
- tests
- config

## Subject
- Use imperative, present tense: "change" not "changed" nor "changes"
- Don't capitalize first letter
- No dot (.) at the end

## Body
- Just as in the subject, use the imperative, present tense
- Wrap at 72 characters
- Explain the "what" and "why", not "how"

## Footer
- Reference issues that this commit closes
- Use "Fixes: #123" or "Closes: #123"

## Examples

feat(parser): add support for concurrent document processing

- Implement ThreadPoolExecutor for parallel document parsing
- Add --concurrent flag to advanced_parsing.py
- Add --max-workers option to control concurrency level

Fixes: #45

---

docs(readme): update usage instructions

- Add section about concurrent parsing options
- Clarify environment variable setup
- Update example commands

Closes: #67